<section>
   <h2>Contexts: Variables</h2>
   <p>Variables are defined on a <tt>Cadenza::Context</tt> through the context's
   variable stack, accessible through the <tt>#stack</tt> method.  Each level of
   the stack is referred to as a <b>scope</b>.  When looking up variables 
   Cadenza inspects the stack from the top to the bottom.</p>

   <p>To retrieve the value of a variable given it's name (named it's <b>identifier</b>)
   you can use the <tt>#lookup</tt> method.  Be sure to include any dots if the 
   identifier uses dot notation to refer to sub-objects:</p>

   {{ ruby_example "partials/reference/examples/context.cadenza" }}

   <p>If the variable couldn't be looked up then <tt>#lookup</tt> will return
   <tt>nil</tt>.</p>

   <p>Values can also be assigned to the top of the stack by using the 
   <tt>#assign</tt>, method:</p>

   {{ ruby_example "partials/reference/examples/context2.cadenza" }}

   <p>To add and removes scopes from the variable stack you can call the
   <tt>#push</tt> and <tt>#pop</tt> methods:</p>

   {{ ruby_example "partials/reference/examples/context3.cadenza" }}
</section>
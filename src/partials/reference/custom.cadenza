<section id='custom'>
   <h2>Writing custom compiler components</h2>
   <p style='color:red;font-size:1.2em;'>Heads up: until Cadenza reaches v1.0.0 
   the component API is still flexible any may be subject to change.  However,
   the current version should be mostly stable and any changes should be minor.</p>
</section>

<section>
   <h2>Custom Lexers</h2>
   <p>Lexers transform raw text into tokens useable by the parser.  Each token
   is a two element <tt>Array</tt> object with the first token being a well 
   defined <tt>Symbol</tt> object (see [documentation] for specifics) (TODO: link here).
   The second object is an instance of <tt>Cadenza::Token</tt> which will hold
   the value of the token.</p>

   <p>The separation between lexer and parser was intentional to help give Cadenza
   the ability to parse multiple input languages.  This may not always be possible
   with Lexers alone since the input language might be very different from Cadenza's
   syntax (example: c++)  but may be possible to parse similar languages such as
   Smarty, Django or Liquid (which were inspirations for Cadenza).</p>

   <p>A new lexer must implement two methods to be useable in Cadenza: 
   <tt>#source=(io_object)</tt> and <tt>#next_token</tt></p>

   {{ ruby_example "partials/reference/examples/custom_lexer.cadenza" }}
</section>

<section>
   <h2>Custom Parsers</h2>
   <p>Parsers use a Lexer to retrieve tokens from the input template and form
   them into an Abstract Syntax Tree (AST) of the Cadenza Node classes.  The 
   root of the AST should always be a <tt>Cadenza::DocumentNode</tt>.</p>

   <p>Cadenza's included parser <tt>Cadenza::Parser</tt> is a look-ahead left to
   right parser (LALR) generated by ruby's Racc compiler.  While this type of 
   parser has a large advantage of speed and other techincal details (such as
   being able to correctly parser Arithmetic and Boolean expressions) it lacks
   some of the flexibility of other types of parsers, such as recursive descent
   parsers which can be more flexible.</p>

   <p>Even though Cadenza is implemented as this type of parser you aren't required
   at all to implement this as your own parser.  A recursive descent parser or 
   something else entirely should work just as well as Cadenza's LALR parser.</p>

   <p>Cadenza requires the parser have the same constructor as <tt>Cadenza::Parser</tt>
   and also requires it define the <tt>#parse</tt> method.</p>

   {{ ruby_example "partials/reference/examples/custom_parser.cadenza" }}
</section>

<section>
   <h2>Custom Renderers</h2>
   <p>Renderers take an AST and a context object and are expected to write the
   output template to it's given output stream.  The renderer must implement the
   same constructor and also implement the <tt>#render</tt> method.</p>

   <p>To make things a bit easier you may want to subclass <tt>Cadenza::BaseRenderer</tt>
   which will take care of some of the setup for you and make the subclass a bit
   cleaner.</p>

   {{ ruby_example "partials/reference/examples/custom_renderer.cadenza" }}
</section>

<section>
   <h2>Custom Loaders</h2>
   <p>Loaders are very simple, they must implement two methods: <tt>#load_source</tt>
   or <tt>#load_template</tt> which are expected to return a string or an AST
   respectively.  If they cannot load the given template name they should return
   <tt>nil</tt> so Cadenza knows to move onto the next template.</p>

   <p>Keep in mind, just because most examples show template loading passing in
   paths to files you can use whatever string you want to identify your template,
   for example in a database loader you could specify the template name like so:
   <tt>"template_id:135"</tt>.</p>

   {{ ruby_example "partials/reference/examples/custom_loader.cadenza" }}
</section>